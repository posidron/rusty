// JSON with File I/O Example
// This demonstrates using JSON with file operations

// First, load our JSON utilities
// (In a real application, we'd use an import mechanism, but here we'll redefine the functions)

// Create a new empty object
fun object_new() {
    return array();
}

// Add a property to an object
fun object_set(obj, key, value) {
    var i = 0;
    // Check if key already exists
    while (i < length(obj)) {
        var pair = get(obj, i);
        if (get(pair, 0) == key) {
            // Update existing pair
            var new_pair = array();
            new_pair = push(new_pair, key);
            new_pair = push(new_pair, value);

            // Create new object with updated pair
            var new_obj = array();
            var j = 0;
            while (j < length(obj)) {
                if (j == i) {
                    new_obj = push(new_obj, new_pair);
                } else {
                    new_obj = push(new_obj, get(obj, j));
                }
                j = j + 1;
            }
            return new_obj;
        }
        i = i + 1;
    }

    // Key doesn't exist, add new pair
    var pair = array();
    pair = push(pair, key);
    pair = push(pair, value);
    return push(obj, pair);
}

// Get a property value from an object
fun object_get(obj, key) {
    var i = 0;
    while (i < length(obj)) {
        var pair = get(obj, i);
        if (get(pair, 0) == key) {
            return get(pair, 1);
        }
        i = i + 1;
    }
    return nil; // Key not found
}

// Convert object to JSON string
fun to_json(value) {
    return json_stringify(value);
}

// Parse JSON string to Rusty value
fun from_json(json_str) {
    return json_parse(json_str);
}

// Function to save an object to a JSON file
fun save_json(obj, file_path) {
    var json_str = to_json(obj);
    var result = file(file_path, "w", json_str);
    return result;
}

// Function to load an object from a JSON file
fun load_json(file_path) {
    if (file(file_path, "e")) {
        var json_str = file(file_path, "r");
        return from_json(json_str);
    }
    return nil;
}

// ----- Example Application: User Configuration Management -----

print "--- JSON File Operations Example ---";

// Define file path for user config
var config_file = "user_config.json";

// Check if config file already exists
if (file(config_file, "e")) {
    print "\nLoading existing configuration:";
    var config = load_json(config_file);
    print config;
} else {
    print "\nNo configuration found. Creating default config:";

    // Create default configuration
    var config = object_new();
    config = object_set(config, "username", "default_user");
    config = object_set(config, "theme", "light");
    config = object_set(config, "notifications", true);

    // Create preferences object
    var prefs = object_new();
    prefs = object_set(prefs, "language", "en");
    prefs = object_set(prefs, "fontSize", 12);

    // Add preferences to config
    config = object_set(config, "preferences", prefs);

    // Save the configuration
    save_json(config, config_file);
    print "Default configuration created:";
    print config;
}

// Modify the configuration
print "\nUpdating configuration:";
var config = load_json(config_file);

// Update simple properties
config = object_set(config, "theme", "dark");
config = object_set(config, "lastLogin", time());

// Update nested properties
var prefs = object_get(config, "preferences");
prefs = object_set(prefs, "fontSize", 14);
config = object_set(config, "preferences", prefs);

// Add a history array
var history = array();
history = push(history, "login: " + as_string(time()));
config = object_set(config, "history", history);

// Save the updated configuration
print "Saving updated configuration:";
save_json(config, config_file);
print config;

// Read it back to verify
print "\nVerifying saved configuration:";
var saved_config = load_json(config_file);
print saved_config;

// Clean up
file(config_file, "d");
print "\nConfiguration file deleted.";

print "\nExample completed.";
