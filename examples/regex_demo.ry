// Regex demo for Rusty Language
// Demonstration of regular expression operations

print "--- Regex Module Demo ---";

// Creating a regex pattern
print "\nCreating a regex pattern:";
var pattern = "[0-9]+";  // Match one or more digits
var regex = regex_new(pattern);
print "Created pattern: " + pattern;

// Testing a match
print "\nTesting regex matches:";
print "Does '123' match? " + as_string(regex_test(regex, "123"));
print "Does 'abc' match? " + as_string(regex_test(regex, "abc"));
print "Does 'a123b' match? " + as_string(regex_test(regex, "a123b"));

// Finding all matches
print "\nFinding all matches:";
var text = "I have 10 apples, 20 oranges, and 15 bananas.";
print "Text: " + text;
var matches = regex_match_all(regex, text);
print "Found matches:";
print matches;

// Counting matches
print "Number of matches: " + as_string(length(matches));

// Replacing text
print "\nReplacing text:";
var replace_regex = regex_new("(apple|orange|banana)s?");
var result = regex_replace_all(replace_regex, text, "fruit");
print "Original: " + text;
print "Replaced: " + result;

// Splitting text
print "\nSplitting text:";
var split_regex = regex_new(",\\s*");  // Split by commas with optional whitespace
var split_text = "apple, orange,banana, pear";
print "Text to split: " + split_text;
var parts = regex_split(split_regex, split_text);
print "Split parts:";
print parts;

// Capturing groups
print "\nCapturing groups:";
var capture_regex = regex_new("([a-z]+)=([0-9]+)");
var capture_text = "width=100 height=200";
print "Text: " + capture_text;
var captures = regex_capture(capture_regex, capture_text);
print "Capture groups:";
print captures;

if (captures != nil) {
    print "Full match: " + get(captures, 0);
    print "Group 1 (key): " + get(captures, 1);
    print "Group 2 (value): " + get(captures, 2);
}

// Validating patterns
print "\nValidating patterns:";
print "Is '[0-9]+' valid? " + as_string(regex_is_valid("[0-9]+"));
print "Is '(unclosed' valid? " + as_string(regex_is_valid("(unclosed"));

// Escaping special characters
print "\nEscaping special characters:";
var special_chars = "Hello (.*+?) world!";
print "Original: " + special_chars;
var escaped = regex_escape(special_chars);
print "Escaped: " + escaped;

// Using the escaped pattern in a regex
var literal_regex = regex_new(escaped);
print "Does exact text match? " + as_string(regex_test(literal_regex, special_chars));

// Practical example: extracting data
print "\nPractical example - Extracting data:";
var log_line = "2023-04-15 14:30:45 ERROR: Database connection failed";
var log_regex = regex_new("([0-9]{4}-[0-9]{2}-[0-9]{2}) ([0-9]{2}:[0-9]{2}:[0-9]{2}) ([A-Z]+): (.+)");

var log_parts = regex_capture(log_regex, log_line);
if (log_parts != nil) {
    print "Log data:";
    print "  Date: " + get(log_parts, 1);
    print "  Time: " + get(log_parts, 2);
    print "  Level: " + get(log_parts, 3);
    print "  Message: " + get(log_parts, 4);
}

// Another practical example: validating an email
print "\nValidating an email address:";
// Using the working email pattern with character classes and explicit dot
var email_regex = regex_new("[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[.][a-zA-Z]{2,}");

fun is_valid_email(email) {
    return regex_test(email_regex, email);
}

var valid_emails = array("user@example.com", "name.surname@domain.co.uk", "info@test-site.com");
var invalid_emails = array("user@", "user@.com", "@example.com", "user@example");

print "Valid emails:";
var i = 0;
while (i < length(valid_emails)) {
    var email = get(valid_emails, i);
    print "  " + email + ": " + as_string(is_valid_email(email));
    i = i + 1;
}

print "Invalid emails:";
i = 0;
while (i < length(invalid_emails)) {
    var email = get(invalid_emails, i);
    print "  " + email + ": " + as_string(is_valid_email(email));
    i = i + 1;
}

print "\nDemo completed.";
