// Regex Utilities for Rusty Language
// A library of helper functions for working with regular expressions

// --- Regex Cache ---
var __regex_cache = array();

// Get a regex from cache or create a new one
fun regex(pattern) {
    var i = 0;
    while (i < length(__regex_cache)) {
        var entry = get(__regex_cache, i);
        if (get(entry, 0) == pattern) {
            return get(entry, 1);
        }
        i = i + 1;
    }

    // Not found in cache, create new regex
    var new_regex = regex_new(pattern);

    // Add to cache
    var cache_entry = array();
    cache_entry = push(cache_entry, pattern);
    cache_entry = push(cache_entry, new_regex);
    __regex_cache = push(__regex_cache, cache_entry);

    return new_regex;
}

// --- Pattern Matching ---

// Test if a string matches a pattern
fun match(pattern, text) {
    var r = regex(pattern);
    return regex_test(r, text);
}

// Find all matches in a string
fun match_all(pattern, text) {
    var r = regex(pattern);
    return regex_match_all(r, text);
}

// Count the number of matches in a string
fun match_count(pattern, text) {
    var matches = match_all(pattern, text);
    return length(matches);
}

// Check if the pattern is a valid regex
fun is_valid_pattern(pattern) {
    return regex_is_valid(pattern);
}

// --- String Manipulation ---

// Replace all occurrences of a pattern
fun replace_all(pattern, text, replacement) {
    var r = regex(pattern);
    return regex_replace_all(r, text, replacement);
}

// Replace the first occurrence of a pattern
fun replace_first(pattern, text, replacement) {
    // Currently, the regex module doesn't have a native replace_first function
    // So we'll implement it by splitting and joining

    var r = regex(pattern);
    var matches = regex_match_all(r, text);

    if (length(matches) == 0) {
        // No matches, return original text
        return text;
    }

    var first_match = get(matches, 0);

    // Split text at the first occurrence of the pattern
    var parts = regex_split(r, text);

    if (length(parts) <= 1) {
        // This should not happen if we have matches, but just in case
        return text;
    }

    // Join parts with replacement for the first occurrence
    var result = get(parts, 0) + replacement;

    // Add the rest if there are more parts
    var i = 1;
    while (i < length(parts)) {
        if (i > 1) {
            // Add back the original matched pattern for all but the first occurrence
            result = result + first_match;
        }
        result = result + get(parts, i);
        i = i + 1;
    }

    return result;
}

// Split a string by a pattern
fun split(pattern, text) {
    var r = regex(pattern);
    return regex_split(r, text);
}

// --- Capture Groups ---

// Get capture groups from a pattern match
fun capture(pattern, text) {
    var r = regex(pattern);
    return regex_capture(r, text);
}

// Extract named captures (simulated - Rusty doesn't support named captures natively)
fun extract(pattern, text, group_names) {
    var captures = capture(pattern, text);

    if (captures == nil) {
        return nil; // No match
    }

    // Create a map-like structure with keys and values
    var result = array();

    // Start from index 1 (skip the full match)
    var i = 1;
    while (i < length(captures) && i <= length(group_names)) {
        var name = get(group_names, i - 1);
        var value = get(captures, i);

        // Create a key-value pair
        var pair = array();
        pair = push(pair, name);
        pair = push(pair, value);

        // Add to result
        result = push(result, pair);

        i = i + 1;
    }

    return result;
}

// --- Common Patterns ---

// Email validation pattern
var EMAIL_PATTERN = "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[.][a-zA-Z]{2,}";

// URL validation pattern (simplified)
var URL_PATTERN = "https?://[a-zA-Z0-9.-]+[.][a-zA-Z0-9-]+";

// Date pattern (YYYY-MM-DD)
var DATE_PATTERN = "[0-9]{4}-[0-9]{2}-[0-9]{2}";

// Time pattern (HH:MM:SS)
var TIME_PATTERN = "[0-9]{2}:[0-9]{2}:[0-9]{2}";

// IPv4 pattern (simplified)
var IPV4_PATTERN = "[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}";

// --- Pattern Validators ---

// Validate an email address
fun is_email(text) {
    return match(EMAIL_PATTERN, text);
}

// Validate a URL
fun is_url(text) {
    return match(URL_PATTERN, text);
}

// Validate a date in YYYY-MM-DD format
fun is_date(text) {
    return match(DATE_PATTERN, text);
}

// Validate a time in HH:MM:SS format
fun is_time(text) {
    return match(TIME_PATTERN, text);
}

// Validate an IPv4 address
fun is_ipv4(text) {
    return match(IPV4_PATTERN, text);
}

// Just print a simple message to show the file loaded correctly
print "Regex Utilities Loaded Successfully";
