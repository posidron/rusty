// Mini Regex Utilities for Rusty Language

// --- Regex Cache ---
var __regex_cache = array();

// Get a regex from cache or create a new one
fun regex(pattern) {
    var i = 0;
    while (i < length(__regex_cache)) {
        var entry = get(__regex_cache, i);
        if (get(entry, 0) == pattern) {
            return get(entry, 1);
        }
        i = i + 1;
    }

    // Not found in cache, create new regex
    var new_regex = regex_new(pattern);

    // Add to cache
    var cache_entry = array();
    cache_entry = push(cache_entry, pattern);
    cache_entry = push(cache_entry, new_regex);
    __regex_cache = push(__regex_cache, cache_entry);

    return new_regex;
}

// Test if a string matches a pattern
fun match(pattern, text) {
    var r = regex(pattern);
    return regex_test(r, text);
}

// Find all matches in a string
fun match_all(pattern, text) {
    var r = regex(pattern);
    return regex_match_all(r, text);
}

// Count the number of matches in a string
fun match_count(pattern, text) {
    var matches = match_all(pattern, text);
    return length(matches);
}

// Replace all occurrences of a pattern
fun replace_all(pattern, text, replacement) {
    var r = regex(pattern);
    return regex_replace_all(r, text, replacement);
}

// Split a string by a pattern
fun split(pattern, text) {
    var r = regex(pattern);
    return regex_split(r, text);
}

// --- Common Patterns ---
var EMAIL_PATTERN = "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[.][a-zA-Z]{2,}";
var DATE_PATTERN = "[0-9]{4}-[0-9]{2}-[0-9]{2}";

// --- Validation Functions ---
fun is_email(text) {
    return match(EMAIL_PATTERN, text);
}

fun is_date(text) {
    return match(DATE_PATTERN, text);
}

// --- Demo ---
fun run_demo() {
    print "--- Mini Regex Utils Demo ---";

    // Test matching
    print "\nPattern matching:";
    print "Is '123' a number? " + as_string(match("[0-9]+", "123"));
    print "Is 'abc' a number? " + as_string(match("[0-9]+", "abc"));

    // Test email validation
    print "\nEmail validation:";
    print "Is 'user@example.com' valid? " + as_string(is_email("user@example.com"));
    print "Is 'invalid' valid? " + as_string(is_email("invalid"));

    // Test date validation
    print "\nDate validation:";
    print "Is '2023-04-15' valid? " + as_string(is_date("2023-04-15"));
    print "Is '04/15/2023' valid? " + as_string(is_date("04/15/2023"));

    // Test counting
    var text = "The quick brown fox jumps over the lazy dog";
    print "\nCounting vowels in: " + text;
    print "Number of vowels: " + as_string(match_count("[aeiou]", text));

    // Test replacing
    print "\nReplacement:";
    print "Original: " + text;
    print "With spaces replaced: " + replace_all(" ", text, "-");

    // Test splitting
    print "\nSplitting:";
    var split_text = "apple,orange,banana";
    print "Text to split: " + split_text;
    var parts = split(",", split_text);
    print "Split parts:";
    print parts;

    print "\nDemo completed.";
}

// Run the demo
run_demo();
