// JSON Objects Demo for Rusty Language

print "--- JSON Objects Demo ---";

// Parse a simple JSON object
print "\nParsing a JSON object:";
var person = json_parse("{\"name\":\"John\",\"age\":30}");
print "Parsed object:";
print person;

// Access object properties
print "\nAccessing object properties:";
print "Number of properties: " + as_string(length(person));

// Get the first property (key-value pair)
var first_prop = get(person, 0);
print "First property (array): ";
print first_prop;

// Extract key and value
var key = get(first_prop, 0);
var value = get(first_prop, 1);
print "Key: " + key;
print "Value: " + as_string(value);

// Function to find a property value by key
fun find_prop(obj, key_to_find) {
    var i = 0;
    while (i < length(obj)) {
        var prop = get(obj, i);
        var prop_key = get(prop, 0);
        var prop_value = get(prop, 1);

        if (prop_key == key_to_find) {
            return prop_value;
        }

        i = i + 1;
    }
    return nil;
}

// Use our helper function to find properties
print "\nFinding properties by key:";
var name = find_prop(person, "name");
var age = find_prop(person, "age");
print "Name: " + as_string(name);
print "Age: " + as_string(age);

// Create a JSON object programmatically
print "\nCreating a JSON object:";

// Start with an empty array
var user = array();

// Add key-value pairs as arrays
user = push(user, array("username", "alice123"));
user = push(user, array("email", "alice@example.com"));
user = push(user, array("active", true));
user = push(user, array("points", 250));

print "Created object:";
print user;

// Convert to JSON string
var user_json = json_stringify(user);
print "\nAs JSON string:";
print user_json;

// Parse it back
var parsed_user = json_parse(user_json);
print "\nParsed back:";
print parsed_user;

// Nested objects
print "\nWorking with nested objects:";

// Create a nested object structure
var address = array();
address = push(address, array("street", "123 Main St"));
address = push(address, array("city", "Anytown"));
address = push(address, array("zip", "12345"));

var contact = array();
contact = push(contact, array("name", "Bob"));
contact = push(contact, array("address", address));
contact = push(contact, array("phone", "555-1234"));

print "Nested object:";
print contact;

// Access nested data
print "\nAccessing nested data:";
var contact_address = find_prop(contact, "address");
print "Contact address object:";
print contact_address;

var city = find_prop(contact_address, "city");
print "City: " + as_string(city);

// Convert nested structure to JSON
var nested_json = json_stringify(contact);
print "\nNested JSON:";
print nested_json;

print "\nDemo completed.";
