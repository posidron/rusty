// JSON Objects Demo for Rusty Language

print "--- JSON Objects Demo ---";

// Parse a simple JSON object
print "\nParsing a JSON object:";
var person_json = "{\"name\":\"John\",\"age\":30}";
var person = json_parse(person_json);
print "Parsed object:";
print person;

// Function to find a property by key
fun find_prop(obj, search_key) {
    var i = 0;
    while (i < length(obj)) {
        var prop = get(obj, i);
        var key = get(prop, 0);
        var value = get(prop, 1);

        if (key == search_key) {
            return value;
        }

        i = i + 1;
    }
    return nil;
}

// Access properties
print "\nAccessing object properties:";
var name = find_prop(person, "name");
var age = find_prop(person, "age");
print "Name: " + name;
print "Age: " + as_string(age);

// Create an object from scratch
print "\nCreating an object:";
var user = array();
user = push(user, array("username", "alice"));
user = push(user, array("email", "alice@example.com"));
user = push(user, array("active", true));

print "Created user object:";
print user;

// Convert to JSON
print "\nConverting to JSON:";
var user_json = json_stringify(user);
print user_json;

// Create nested objects
print "\nNested objects:";

// Create address object
var address = array();
address = push(address, array("street", "123 Main St"));
address = push(address, array("city", "Boston"));
address = push(address, array("zipcode", "02101"));

// Add address to user
user = push(user, array("address", address));

print "User with address:";
print user;

// Access nested property
print "\nAccessing nested property:";
var user_address = find_prop(user, "address");
var city = find_prop(user_address, "city");
print "City: " + city;

// Serialize complex object to JSON
print "\nSerialized complex object:";
var complex_json = json_stringify(user);
print complex_json;

// Deserialize back from JSON
print "\nDeserialized from JSON:";
var parsed_user = json_parse(complex_json);
print parsed_user;

print "\nDemo completed.";
