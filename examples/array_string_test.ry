// Array and String Manipulation Tests
// This file tests the array and string manipulation functions

print "Running array and string manipulation tests";
print "==========================================";
print "";

// ---- Test variables ----
var total_tests = 0;
var passed_tests = 0;

// ---- Test functions ----
fun assert_true(condition, message) {
    total_tests = total_tests + 1;
    if (condition) {
        passed_tests = passed_tests + 1;
        print "[PASS] " + message;
    } else {
        print "[FAIL] " + message;
    }
}

fun assert_equals(actual, expected, message) {
    var result = false;
    if (actual == expected) {
        result = true;
    }
    assert_true(result, message + " (Expected: " + as_string(expected) + ", Got: " + as_string(actual) + ")");
}

// ---- Array Tests ----
print "Array Tests:";
print "-----------";

// Test creating arrays
var arr = array(1, 2, 3, 4, 5);
assert_equals(length(arr), 5, "Array creation and length");

// Test get/set functions
var value = get(arr, 2);
assert_equals(value, 3, "get(array, index)");

var new_arr = set(arr, 2, 99);
assert_equals(get(new_arr, 2), 99, "set(array, index, value)");

// Test direct index access functions
value = index(arr, 3);
assert_equals(value, 4, "index(array, index)");

new_arr = index_set(arr, 1, 88);
assert_equals(get(new_arr, 1), 88, "index_set(array, index, value)");

// Test push and pop
new_arr = push(arr, 6);
assert_equals(length(new_arr), 6, "push(array, value)");
assert_equals(get(new_arr, 5), 6, "push value correct");

var popped = pop(new_arr);
assert_equals(popped, 6, "pop(array) returns correct value");

// Test array slicing
var slice_arr = slice(arr, 1, 2);
assert_equals(length(slice_arr), 2, "slice(array, start, length) returns correct length");
assert_equals(get(slice_arr, 0), 2, "slice(array, start, length) first value correct");
assert_equals(get(slice_arr, 1), 3, "slice(array, start, length) second value correct");

// Test array concat and join
var arr2 = array(6, 7, 8);
var concat_arr = concat(arr, arr2);
assert_equals(length(concat_arr), 8, "concat(array1, array2) returns correct length");
assert_equals(get(concat_arr, 5), 6, "concat(array1, array2) values correct");

var joined = join(arr, "-");
assert_equals(joined, "1-2-3-4-5", "join(array, separator)");

// ---- String Tests ----
print "";
print "String Tests:";
print "------------";

// Test string length
var str = "hello";
assert_equals(length(str), 5, "String length");

// Test string get/set
var char = get(str, 1);
assert_equals(char, "e", "get(string, index)");

var new_str = set(str, 1, "a");
assert_equals(new_str, "hallo", "set(string, index, value)");

// Test string index access
char = index(str, 2);
assert_equals(char, "l", "index(string, index)");

new_str = index_set(str, 0, "j");
assert_equals(new_str, "jello", "index_set(string, index, value)");

// Test string slicing
var substr = slice(str, 1, 3);
assert_equals(substr, "ell", "slice(string, start, length)");

substr = slice(str, 2);
assert_equals(substr, "llo", "slice(string, start)");

// ---- Results ----
print "";
print "Test Results: " + as_string(passed_tests) + "/" + as_string(total_tests) + " tests passed";
if (passed_tests == total_tests) {
    print "All tests passed!";
} else {
    print as_string(total_tests - passed_tests) + " tests failed.";
}
