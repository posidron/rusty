// JSON Utilities for Rusty Language
// This file provides helper functions for working with JSON data

// Create a new empty object
fun object_new() {
    return array();
}

// Add a property to an object
fun object_set(obj, key, value) {
    var i = 0;
    // Check if key already exists
    while (i < length(obj)) {
        var pair = get(obj, i);
        if (get(pair, 0) == key) {
            // Update existing pair
            var new_pair = array();
            new_pair = push(new_pair, key);
            new_pair = push(new_pair, value);

            // Create new object with updated pair
            var new_obj = array();
            var j = 0;
            while (j < length(obj)) {
                if (j == i) {
                    new_obj = push(new_obj, new_pair);
                } else {
                    new_obj = push(new_obj, get(obj, j));
                }
                j = j + 1;
            }
            return new_obj;
        }
        i = i + 1;
    }

    // Key doesn't exist, add new pair
    var pair = array();
    pair = push(pair, key);
    pair = push(pair, value);
    return push(obj, pair);
}

// Get a property value from an object
fun object_get(obj, key) {
    var i = 0;
    while (i < length(obj)) {
        var pair = get(obj, i);
        if (get(pair, 0) == key) {
            return get(pair, 1);
        }
        i = i + 1;
    }
    return nil; // Key not found
}

// Check if an object has a property
fun object_has(obj, key) {
    var i = 0;
    while (i < length(obj)) {
        var pair = get(obj, i);
        if (get(pair, 0) == key) {
            return true;
        }
        i = i + 1;
    }
    return false;
}

// Get all keys from an object
fun object_keys(obj) {
    var keys = array();
    var i = 0;
    while (i < length(obj)) {
        var pair = get(obj, i);
        keys = push(keys, get(pair, 0));
        i = i + 1;
    }
    return keys;
}

// Create a new empty array
fun array_new() {
    return array();
}

// Convert object to JSON string
fun to_json(value) {
    return json_stringify(value);
}

// Parse JSON string to Rusty value
fun from_json(json_str) {
    return json_parse(json_str);
}

// Demo using the utilities
fun run_demo() {
    print "--- JSON Utilities Demo ---";

    // Create a new object
    print "\nCreating an object:";
    var person = object_new();

    // Set properties
    person = object_set(person, "name", "John");
    person = object_set(person, "age", 30);
    person = object_set(person, "active", true);

    print "Person object:";
    print person;

    // Get properties
    print "\nAccessing properties:";
    print "Name: " + object_get(person, "name");
    print "Age: " + as_string(object_get(person, "age"));

    // Check if properties exist
    print "\nChecking properties:";
    print "Has name: " + as_string(object_has(person, "name"));
    print "Has email: " + as_string(object_has(person, "email"));

    // Update a property
    print "\nUpdating a property:";
    person = object_set(person, "age", 31);
    print "Updated age: " + as_string(object_get(person, "age"));

    // Get all keys
    print "\nObject keys:";
    var keys = object_keys(person);
    print keys;

    // Create a nested object
    print "\nNested objects:";
    var address = object_new();
    address = object_set(address, "street", "123 Main St");
    address = object_set(address, "city", "Boston");

    person = object_set(person, "address", address);
    print "Person with address:";
    print person;

    // Access nested property
    print "\nAccessing nested property:";
    var city = object_get(object_get(person, "address"), "city");
    print "City: " + city;

    // Convert to JSON string
    print "\nJSON serialization:";
    var json = to_json(person);
    print json;

    // Parse JSON
    print "\nJSON parsing:";
    var parsed = from_json(json);
    print parsed;

    print "\nDemo completed.";
}

// Run the demo
run_demo();
