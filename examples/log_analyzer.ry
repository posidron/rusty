// Log File Analyzer for Rusty Language
// A practical example of using regex for log file analysis

// First, import the regex utilities
// Include the regex_utils.ry file to use the helper functions
// Note: In a real run, you would need to load this file first

// Define log patterns
var LOG_ENTRY_PATTERN = "^([0-9]{4}-[0-9]{2}-[0-9]{2}) ([0-9]{2}:[0-9]{2}:[0-9]{2}) (INFO|WARN|ERROR|DEBUG) (.+)$";
var ERROR_PATTERN = "(error|exception|fail|failed|failure)";
var IP_ADDRESS_PATTERN = "(?:[0-9]{1,3}[.]){3}[0-9]{1,3}";
var URL_PATTERN = "https?://[a-zA-Z0-9.-]+(?:[.][a-zA-Z0-9-]+)+/?";

// Create regex objects
var log_entry_regex = regex_new(LOG_ENTRY_PATTERN);
var error_regex = regex_new(ERROR_PATTERN);
var ip_regex = regex_new(IP_ADDRESS_PATTERN);
var url_regex = regex_new(URL_PATTERN);

// Log statistics structure
var stats = array();
stats = push(stats, array("total_entries", 0));
stats = push(stats, array("info_count", 0));
stats = push(stats, array("warn_count", 0));
stats = push(stats, array("error_count", 0));
stats = push(stats, array("debug_count", 0));
stats = push(stats, array("ip_addresses", array()));
stats = push(stats, array("urls", array()));
stats = push(stats, array("errors", array()));

// Helper function to get a value from stats
fun get_stat(name) {
    var i = 0;
    while (i < length(stats)) {
        var entry = get(stats, i);
        if (get(entry, 0) == name) {
            return get(entry, 1);
        }
        i = i + 1;
    }
    return nil;
}

// Helper function to set a value in stats
fun set_stat(name, value) {
    var i = 0;
    while (i < length(stats)) {
        var entry = get(stats, i);
        if (get(entry, 0) == name) {
            var new_entry = array();
            new_entry = push(new_entry, name);
            new_entry = push(new_entry, value);

            // Create a new stats array with the updated entry
            var new_stats = array();
            var j = 0;
            while (j < length(stats)) {
                if (j == i) {
                    new_stats = push(new_stats, new_entry);
                } else {
                    new_stats = push(new_stats, get(stats, j));
                }
                j = j + 1;
            }
            stats = new_stats;
            return;
        }
        i = i + 1;
    }

    // Not found, add new entry
    var new_entry = array();
    new_entry = push(new_entry, name);
    new_entry = push(new_entry, value);
    stats = push(stats, new_entry);
}

// Helper function to increment a stat counter
fun increment_stat(name) {
    var current = get_stat(name);
    if (current == nil) {
        current = 0;
    }
    set_stat(name, current + 1);
}

// Helper function to add a unique item to an array stat
fun add_unique_to_array_stat(stat_name, item) {
    var arr = get_stat(stat_name);

    // Check if item already exists
    var i = 0;
    while (i < length(arr)) {
        if (get(arr, i) == item) {
            return arr; // Item already exists
        }
        i = i + 1;
    }

    // Add item
    arr = push(arr, item);
    set_stat(stat_name, arr);
    return arr;
}

// Parse a single log line
fun parse_log_line(line) {
    var matches = regex_capture(log_entry_regex, line);

    if (matches == nil) {
        return nil; // Not a valid log entry
    }

    // Create a log entry object
    var log_entry = array();
    log_entry = push(log_entry, array("date", get(matches, 1)));
    log_entry = push(log_entry, array("time", get(matches, 2)));
    log_entry = push(log_entry, array("level", get(matches, 3)));
    log_entry = push(log_entry, array("message", get(matches, 4)));

    // Update stats
    increment_stat("total_entries");

    // Update level counts
    var level = get(matches, 3);
    if (level == "INFO") {
        increment_stat("info_count");
    } else if (level == "WARN") {
        increment_stat("warn_count");
    } else if (level == "ERROR") {
        increment_stat("error_count");
    } else if (level == "DEBUG") {
        increment_stat("debug_count");
    }

    // Extract IPs
    var message = get(matches, 4);
    var ips = regex_match_all(ip_regex, message);
    var i = 0;
    while (i < length(ips)) {
        add_unique_to_array_stat("ip_addresses", get(ips, i));
        i = i + 1;
    }

    // Extract URLs
    var urls = regex_match_all(url_regex, message);
    i = 0;
    while (i < length(urls)) {
        add_unique_to_array_stat("urls", get(urls, i));
        i = i + 1;
    }

    // Check for errors
    if (regex_test(error_regex, message)) {
        var errors = get_stat("errors");
        errors = push(errors, log_entry);
        set_stat("errors", errors);
    }

    return log_entry;
}

// Generate sample log data
fun generate_sample_logs() {
    var logs = array();

    logs = push(logs, "2023-04-15 08:30:45 INFO Server started on port 8080");
    logs = push(logs, "2023-04-15 08:31:12 INFO Client connected from 192.168.1.105");
    logs = push(logs, "2023-04-15 08:35:21 DEBUG Processing request for /api/data");
    logs = push(logs, "2023-04-15 08:36:15 INFO Request received for https://example.com/api/users");
    logs = push(logs, "2023-04-15 08:40:32 WARN Slow query detected (2.5s): SELECT * FROM users");
    logs = push(logs, "2023-04-15 08:45:01 ERROR Database connection failed to 10.0.0.15");
    logs = push(logs, "2023-04-15 08:46:23 INFO Client disconnected from 192.168.1.105");
    logs = push(logs, "2023-04-15 09:02:11 DEBUG Cache invalidated for user profile");
    logs = push(logs, "2023-04-15 09:15:42 ERROR Failed to load resource at https://api.example.org/data");
    logs = push(logs, "2023-04-15 09:30:05 INFO New user registered: user123");
    logs = push(logs, "2023-04-15 09:45:59 WARN Memory usage high (85%)");
    logs = push(logs, "2023-04-15 10:00:00 INFO Scheduled task started: daily_backup");
    logs = push(logs, "2023-04-15 10:05:23 ERROR Exception in thread main: null pointer exception");
    logs = push(logs, "2023-04-15 10:10:45 INFO Processing payment for order #12345");
    logs = push(logs, "2023-04-15 10:15:30 INFO Request from 203.0.113.42 for /login");

    return logs;
}

// Analyze log data
fun analyze_logs(logs) {
    var i = 0;
    while (i < length(logs)) {
        parse_log_line(get(logs, i));
        i = i + 1;
    }
}

// Print statistics report
fun print_stats_report() {
    print "\n--- Log Analysis Report ---";

    print "\nLog Entries:";
    print "  Total entries: " + as_string(get_stat("total_entries"));
    print "  INFO messages: " + as_string(get_stat("info_count"));
    print "  WARN messages: " + as_string(get_stat("warn_count"));
    print "  ERROR messages: " + as_string(get_stat("error_count"));
    print "  DEBUG messages: " + as_string(get_stat("debug_count"));

    print "\nIP Addresses found:";
    var ips = get_stat("ip_addresses");
    var i = 0;
    while (i < length(ips)) {
        print "  " + get(ips, i);
        i = i + 1;
    }

    print "\nURLs found:";
    var urls = get_stat("urls");
    i = 0;
    while (i < length(urls)) {
        print "  " + get(urls, i);
        i = i + 1;
    }

    print "\nError entries:";
    var errors = get_stat("errors");
    i = 0;
    while (i < length(errors)) {
        var entry = get(errors, i);

        // Extract date, time and message
        var j = 0;
        var date = "";
        var time = "";
        var message = "";

        while (j < length(entry)) {
            var field = get(entry, j);
            var field_name = get(field, 0);
            var field_value = get(field, 1);

            if (field_name == "date") {
                date = field_value;
            } else if (field_name == "time") {
                time = field_value;
            } else if (field_name == "message") {
                message = field_value;
            }

            j = j + 1;
        }

        print "  [" + date + " " + time + "] " + message;
        i = i + 1;
    }
}

// Main function to run the log analyzer
fun run_analyzer() {
    print "--- Log File Analyzer ---";
    print "Generating sample log data...";

    var logs = generate_sample_logs();
    print "Analyzing " + as_string(length(logs)) + " log entries...";

    analyze_logs(logs);
    print_stats_report();

    print "\nAnalysis completed.";
}

// Run the analyzer
run_analyzer();
