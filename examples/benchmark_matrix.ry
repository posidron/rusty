// Matrix multiplication benchmark for Rusty
// This program performs matrix multiplication with configurable dimensions

// Configuration
var matrix_size = 100;  // Larger matrix size for more pronounced comparison
var iterations = 3;    // Number of times to repeat the multiplication

print "Rusty Matrix Multiplication Benchmark";
print "====================================";
print "Matrix Size: " + as_string(matrix_size) + "x" + as_string(matrix_size);
print "Iterations: " + as_string(iterations);
print "";

// Create a matrix with random values
fun create_matrix(size) {
    var matrix = array();
    var i = 0;
    while (i < size) {
        var row = array();
        var j = 0;
        while (j < size) {
            row = push(row, random());
            j = j + 1;
        }
        matrix = push(matrix, row);
        i = i + 1;
    }
    return matrix;
}

// Matrix multiplication function
fun multiply_matrices(a, b, size) {
    var result = array();
    var i = 0;
    while (i < size) {
        var row = array();
        var j = 0;
        while (j < size) {
            var sum = 0;
            var k = 0;
            while (k < size) {
                sum = sum + get(get(a, i), k) * get(get(b, k), j);
                k = k + 1;
            }
            row = push(row, sum);
            j = j + 1;
        }
        result = push(result, row);
        i = i + 1;
    }
    return result;
}

// Calculate matrix trace (sum of diagonal elements)
fun matrix_trace(matrix, size) {
    var trace = 0;
    var i = 0;
    while (i < size) {
        trace = trace + get(get(matrix, i), i);
        i = i + 1;
    }
    return trace;
}

// Initialize matrices
print "Initializing matrices...";
var start_init = time();
var matrix_a = create_matrix(matrix_size);
var matrix_b = create_matrix(matrix_size);
var init_time = time() - start_init;
print "Initialization completed in " + as_string(init_time / 1000) + " ms";
print "";

// Run benchmark
print "Running benchmark...";
var total_time = 0;
var result = nil;
var iter = 0;

while (iter < iterations) {
    print "Iteration " + as_string(iter + 1) + "/" + as_string(iterations) + "...";

    var start_time = time();
    result = multiply_matrices(matrix_a, matrix_b, matrix_size);
    var end_time = time();

    var iter_time = end_time - start_time;
    total_time = total_time + iter_time;

    print "  Time: " + as_string(iter_time / 1000) + " ms";
    print "  Trace: " + as_string(matrix_trace(result, matrix_size));
    print "";

    iter = iter + 1;
}

// Calculate and display results
var avg_time = total_time / iterations;
print "Benchmark Results:";
print "------------------";
print "Total time: " + as_string(total_time / 1000) + " ms";
print "Average time per iteration: " + as_string(avg_time / 1000) + " ms";
print "Operations per second: " + as_string((matrix_size * matrix_size * matrix_size) / (avg_time / 1000000));

// Print CSV format for result extraction
print "RESULT_CSV: rusty," + as_string(matrix_size) + "," + as_string(iterations) + "," + as_string(total_time / 1000) + "," + as_string(avg_time / 1000);

print "Benchmark completed.";
